/*
By Shiri Neisser
Client File
*/

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <arpa/inet.h>
#include <pthread.h>

#define PORT 8083
#define BUFFER_SIZE 1024

void* listen_for_updates(void* arg) {
    int sock = *(int*)arg;
    char buffer[BUFFER_SIZE];

    while (1) {
        memset(buffer, 0, BUFFER_SIZE);
        int bytes_received = read(sock, buffer, BUFFER_SIZE);
        if (bytes_received > 0) {
            printf("%s", buffer);
            // Check for end of game message
            if (strstr(buffer, "Congratulations") || strstr(buffer, "Sorry")) {
                break;
            }
        } else if (bytes_received == 0) {
            printf("Connection closed by the server.\n");
            break;
        } else {
            perror("recv failed");
            break;
        }
    }

    return NULL;
}

int main() {
    int sock = 0;
    struct sockaddr_in serv_addr;
    char buffer[BUFFER_SIZE] = {0};

    // Create socket
    if ((sock = socket(AF_INET, SOCK_STREAM, 0)) < 0) {
        printf("\nSocket creation error\n");
        return -1;
    }
    printf("Socket created successfully.\n");

    serv_addr.sin_family = AF_INET;
    serv_addr.sin_port = htons(PORT);

    // Convert IPv4 and IPv6 addresses from text to binary form
    if (inet_pton(AF_INET, "127.0.0.1", &serv_addr.sin_addr) <= 0) {
        printf("\nInvalid address/ Address not supported\n");
        return -1;
    }
    printf("Address converted successfully.\n");

    // Connect to server
    if (connect(sock, (struct sockaddr *)&serv_addr, sizeof(serv_addr)) < 0) {
        printf("\nConnection Failed\n");
        return -1;
    }
    printf("Connected to server successfully.\n");

    // Read initial message from server
    read(sock, buffer, BUFFER_SIZE);
    printf("%s", buffer);

    // Send bet details to server
    int bet_team, bet_amount;
    printf("Enter your bet (0: tie, 1: Team 1, 2: Team 2) and amount: ");
    scanf("%d %d", &bet_team, &bet_amount);
    snprintf(buffer, BUFFER_SIZE, "%d %d", bet_team, bet_amount);
    send(sock, buffer, strlen(buffer), 0);
    printf("Bet details sent to server: Team %d, Amount %d\n", bet_team, bet_amount);

    // Create a thread to listen for updates
    pthread_t update_thread;
    pthread_create(&update_thread, NULL, listen_for_updates, &sock);

    // Main loop to check for user input
    while (1) {
        printf("Press 'T' to check the remaining time until the game starts: ");
        char input = getchar();
        if (input == 'T' || input == 't') {
            send(sock, "T", 1, 0);
        }
        while (getchar() != '\n'); // Clear the input buffer
    }

    // Wait for the update thread to finish
    pthread_join(update_thread, NULL);

    // Close the socket
    close(sock);
    printf("Connection closed.\n");

    return 0;
}
