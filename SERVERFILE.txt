/*
By Shiri Neisser
Server File
*/

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <pthread.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <time.h>
#include <errno.h>

#define PORT 8083
#define BUFFER_SIZE 1024
#define MAX_CLIENTS 10     
#define GAME_DURATION 30  // 1 minute since we open the server
#define GAME_LENGTH 90     // 90 minutes

pthread_mutex_t lock;
pthread_mutex_t lock_time;

typedef struct {
    /*
    Structure to store client information
    */
    int socket;
    struct sockaddr_in address;
    int client_id;
    int bet_team;
    int bet_amount;
    char comments[BUFFER_SIZE];
} Client;

typedef struct {
    /*
    Structure to store game state
    */
    int score[2];
    int current_minute;
    int game_running;
} GameState;

Client *clients[MAX_CLIENTS];
int client_count = 0;
GameState game_state;
time_t start_time;
int game_started = 0;  // Flag to indicate if the game has started

// Function prototypes
void* simulate_game(void* arg);
void* handle_client_requests(void* arg);
void* handle_new_client(void* arg);
void start_game();
void accept_bets(int server_fd);

/*
Broadcast game update message to all connected clients
*/
void broadcast_game_update(const char *message) {
    for (int i = 0; i < client_count; i++) {
        send(clients[i]->socket, message, strlen(message), 0);
    }
}

/*
Log client message for debugging purposes
*/
void log_client_message(Client *client, const char *message) {
    snprintf(client->comments, BUFFER_SIZE, "Client %d sent: %s", client->client_id, message);
    printf("%s\n", client->comments);  // Log to server console or file if needed
}

/*
Simulate the game by updating the score and broadcasting updates to clients
*/
void* simulate_game(void* arg) {
    pthread_mutex_lock(&lock);
    game_state.current_minute = 0;
    game_state.score[0] = 0;
    game_state.score[1] = 0;
    game_state.game_running = 1;
    game_started = 1;
    pthread_mutex_unlock(&lock);
    
    printf("THE GAME HAS BEEN STARTED!\n");  // Print to indicate the game has started
    
    for (int j = 1; j <= GAME_LENGTH; j++) {
        pthread_mutex_lock(&lock);
        game_state.current_minute = j;
        int team_that_made_goal = rand() % 2;
        int goal = rand() % 2;
        game_state.score[team_that_made_goal] += goal;
        pthread_mutex_unlock(&lock);

        char update[BUFFER_SIZE];
        snprintf(update, BUFFER_SIZE, "Minute %d: Team 1: %d, Team 2: %d\n", game_state.current_minute, game_state.score[0], game_state.score[1]);
        broadcast_game_update(update);
        sleep(1);
    }

    pthread_mutex_lock(&lock);
    game_state.game_running = 0;
    game_started = 0;
    pthread_mutex_unlock(&lock);

    // Determine the outcome of the bet for each client
    for (int i = 0; i < client_count; i++) {
        Client *client = clients[i];
        char result[BUFFER_SIZE];
        if ((client->bet_team == 1 && game_state.score[0] > game_state.score[1]) ||
            (client->bet_team == 2 && game_state.score[1] > game_state.score[0]) ||
            (client->bet_team == 0 && game_state.score[0] == game_state.score[1])) {
            snprintf(result, BUFFER_SIZE, "Congratulations! You won your bet of %d on %s.\n",
                     client->bet_amount, (client->bet_team == 0) ? "a tie" : (client->bet_team == 1) ? "Team 1" : "Team 2");
        } else {
            snprintf(result, BUFFER_SIZE, "Sorry, you lost your bet of %d on %s.\n",
                     client->bet_amount, (client->bet_team == 0) ? "a tie" : (client->bet_team == 1) ? "Team 1" : "Team 2");
        }
        send(client->socket, result, strlen(result), 0);
        close(client->socket);
        printf("Client %d disconnected\n", client->client_id);
    }
    client_count = 0; // Reset client count after game

    return NULL;
}

/*
Handle client requests (e.g., time check)
*/
void* handle_client_requests(void* arg) {
    Client *client = (Client *)arg;
    char buffer[BUFFER_SIZE];

    while (1) {
        int bytes_received = recv(client->socket, buffer, BUFFER_SIZE, 0);
        if (bytes_received > 0) {
            buffer[bytes_received] = '\0';
            if (strcmp(buffer, "T") == 0) {
                pthread_mutex_lock(&lock_time);
                time_t current_time = time(NULL);
                double remaining_time = difftime(start_time + GAME_DURATION, current_time);
                pthread_mutex_unlock(&lock_time);

                if (remaining_time <= 0 && !game_started) {
                    remaining_time = 0;
                    start_game();
                }

                snprintf(buffer, BUFFER_SIZE, "Time remaining until the game starts: %.0f seconds\n", remaining_time);
                send(client->socket, buffer, strlen(buffer), 0);
            }
        } else {
            // Client disconnected
            return NULL;
        }
    }
}

/*
Handle new client connection and get betting information
*/
void* handle_new_client(void* arg) {
    Client *client = (Client *)arg;
    char buffer[BUFFER_SIZE];
    int bytes_read;

    pthread_mutex_lock(&lock_time);
    time_t current_time = time(NULL);
    double remaining_time = difftime(start_time + GAME_DURATION, current_time);
    pthread_mutex_unlock(&lock_time);

    snprintf(buffer, BUFFER_SIZE, "The game between Team 1 and Team 2 is about to start in: %.0f seconds\n", remaining_time);
    send(client->socket, buffer, strlen(buffer), 0);
    log_client_message(client, buffer);

    // Create a thread to handle client requests (e.g., time check)
    pthread_t request_thread;
    pthread_create(&request_thread, NULL, handle_client_requests, (void *)client);
    pthread_detach(request_thread);

    bytes_read = recv(client->socket, buffer, BUFFER_SIZE, 0);
    if (bytes_read > 0) {
        buffer[bytes_read] = '\0';
        sscanf(buffer, "%d %d", &client->bet_team, &client->bet_amount);
        log_client_message(client, buffer);

        // Keep the socket open until the game finishes
        while (1) {
            memset(buffer, 0, BUFFER_SIZE);
            int bytes_received = read(client->socket, buffer, BUFFER_SIZE);
            if (bytes_received <= 0) {
                printf("Client %d disconnected unexpectedly\n", client->client_id);
                close(client->socket);
                free(client);
                return NULL;
            }
        }
    }

    return NULL;
}

/*
Start the game simulation in a separate thread
*/
void start_game() {
    pthread_t game_thread;
    pthread_create(&game_thread, NULL, simulate_game, NULL);
}

/*
Accept bets from new clients until the game starts
*/
void accept_bets(int server_fd) {
    struct sockaddr_in address;
    int addrlen = sizeof(address);
    int new_socket;

    start_time = time(NULL);

    while (1) {
        pthread_mutex_lock(&lock_time);
        time_t current_time = time(NULL);
        double remaining_time = difftime(start_time + GAME_DURATION, current_time);
        pthread_mutex_unlock(&lock_time);

        if (remaining_time <= 0 && !game_started) {
            start_game();
            break;
        }

        new_socket = accept(server_fd, (struct sockaddr *)&address, (socklen_t*)&addrlen);
        if (new_socket >= 0) {
            Client *client = (Client *)malloc(sizeof(Client));
            client->socket = new_socket;
            client->address = address;
            client->client_id = client_count++;
            memset(client->comments, 0, BUFFER_SIZE);

            clients[client_count - 1] = client;

            pthread_t client_thread;
            pthread_create(&client_thread, NULL, handle_new_client, (void *)client);
        }
    }
}

int main() {
    int server_fd;
    struct sockaddr_in address;
    int opt = 1;

    pthread_mutex_init(&lock, NULL);
    pthread_mutex_init(&lock_time, NULL);

    if ((server_fd = socket(AF_INET, SOCK_STREAM, 0)) == 0) {
        perror("socket failed");
        exit(EXIT_FAILURE);
    }
    printf("TCP socket created successfully.\n");

    if (setsockopt(server_fd, SOL_SOCKET, SO_REUSEADDR, &opt, sizeof(opt))) {
        perror("setsockopt");
        close(server_fd);
        exit(EXIT_FAILURE);
    }
    printf("Socket options set successfully.\n");

    address.sin_family = AF_INET;
    address.sin_addr.s_addr = INADDR_ANY;
    address.sin_port = htons(PORT);

    if (bind(server_fd, (struct sockaddr *)&address, sizeof(address)) < 0) {
        perror("bind failed");
        close(server_fd);
        exit(EXIT_FAILURE);
    }
    printf("Socket bound successfully.\n");

    if (listen(server_fd, 3) < 0) {
        perror("listen");
        close(server_fd);
        exit(EXIT_FAILURE);
    }
    printf("Server is listening on port %d.\n", PORT);

    accept_bets(server_fd);

    pthread_exit(NULL);
    return 0;
}
